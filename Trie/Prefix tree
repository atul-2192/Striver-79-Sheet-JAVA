

class TrieNode{
	public TrieNode children[];
	public int prefixCount;
	public int wordCount;
	
	TrieNode()
	{
		children= new TrieNode[26];
		prefixCount=0;
		wordCount=0;
	}
};
public class Trie {
	public TrieNode root;
    public Trie() {
        // Write your code here.
		root= new TrieNode();
    }

    public void insert(String word) {
        // Write your code here.
		int n=word.length();
		TrieNode curr= root;
		for(int i=0;i<n;i++)
		{
			int index=word.charAt(i)-'a';
			if(curr.children[index]==null)
			{
				curr.children[index]=new TrieNode();
			}
			curr=curr.children[index];
			curr.prefixCount++;
		}
		curr.wordCount++;
    }

    public int countWordsEqualTo(String word) {
        // Write your code here.
		int n=word.length();
		TrieNode curr= root;
		for(int i=0;i<n;i++)
		{
			int index=word.charAt(i)-'a';
			if(curr.children[index]==null)
			{
				return 0;
			}
			curr=curr.children[index];
		}
		return curr.wordCount;
    }

    public int countWordsStartingWith(String word) {
        // Write your code here.
			int n=word.length();
		TrieNode curr= root;
		for(int i=0;i<n;i++)
		{
			int index=word.charAt(i)-'a';
			if(curr.children[index]==null)
			{
				return 0;
			}
			curr=curr.children[index];
		}
		return curr.prefixCount;
    }

    public void erase(String word) {
        // Write your code here.
			int n=word.length();
		TrieNode curr= root;
		for(int i=0;i<n;i++)
		{
			int index=word.charAt(i)-'a';
		
			curr=curr.children[index];
			curr.prefixCount--;
		}
		 curr.wordCount--;
    }

}
